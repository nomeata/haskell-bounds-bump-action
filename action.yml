name: Create Haskell dependency bumping PRs
description: |
  Uses `cabal outdated` to find outdated dependencies,
  optionally runs `cabal test` and `cabal build` forced to use them,
  and creates a PR.

inputs:
  test:
    description: "Whether to build and test before opening the PR"
    default: true
    type: boolean

runs:
  using: composite
  steps:
  - uses: actions/checkout@v3

  - name: cache cabal store
    if: inputs.test == true
    uses: actions/cache@v3
    with:
      key: bump-action-cabal-store-${{ runner.os }}-${{ github.sha }}
      path: ~/.cabal/store
      restore-keys: bump-action-cabal-store-${{ runner.os }}-

  - uses: haskell/actions/setup@v2
    with:
      ghc-version: latest

  - name: Run cabal outdated
    shell: bash
    run: |
      cabal outdated

      # also remember the values and the number of changes
      echo 'Output of `cabal outdated`:' >> $GITHUB_STEP_SUMMARY
      echo '```' >> $GITHUB_STEP_SUMMARY
      cabal outdated  >> $GITHUB_STEP_SUMMARY
      echo '```' >> $GITHUB_STEP_SUMMARY

      DELIMITER=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      echo "CABAL_OUTDATED<<$DELIMITER" >> $GITHUB_ENV
      cabal outdated | tail -n +2 | sort -u >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "CABAL_COUNT<<$DELIMITER" >> $GITHUB_ENV
      cabal outdated | tail -n +2 | sort -u | wc -l >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "CABAL_PACKAGES<<$DELIMITER" >> $GITHUB_ENV
      cabal outdated | tail -n +2 |
        perl -ne 'print "$1\n" if /([a-zA-Z0-9-]*).*\(latest: (.*)\)/' |
        jq -n -r -R -c '[inputs] | sort | unique | join(", ")' >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "CABAL_FLAGS<<$DELIMITER" >> $GITHUB_ENV
      cabal outdated | tail -n +2 | sort -u |
        perl -ne 'print "--allow-newer=*:$1 --constraint=$1==$2 " if /([a-zA-Z0-9-]*).*\(latest: (.*)\)/' >> $GITHUB_ENV
      echo "" >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "CABAL_PLAN_BOUNDS_FLAGS<<$DELIMITER" >> $GITHUB_ENV
      cabal outdated | tail -n +2 | sort -u |
        perl -ne 'print "--also $1-$2 " if /([a-zA-Z0-9-]*).*\(latest: (.*)\)/' >> $GITHUB_ENV
      echo "" >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

  - name: Gather PR description
    if: env.CABAL_COUNT > 0
    shell: bash
    run: |
      DELIMITER=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      echo "GIT_PR_TITLE<<$DELIMITER" >> $GITHUB_ENV
      echo "Bumping $CABAL_PACKAGES" >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "GIT_PR_BODY<<$DELIMITER" >> $GITHUB_ENV
      echo '```' >> $GITHUB_ENV
      echo "$CABAL_OUTDATED" >> $GITHUB_ENV
      echo '```' >> $GITHUB_ENV
      echo >> $GITHUB_ENV
      if [ ${{ inputs.test }} != "true" ]
      then
        echo "This change has not been tested yet!" >> $GITHUB_ENV
      fi
      echo "Remember to close and reopen this PR to run your CI checks." >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

      echo "GIT_COMMIT_MESSAGE<<$DELIMITER" >> $GITHUB_ENV
      if [ "$CABAL_COUNT" = 1 ]
      then
        echo "Bumping $CABAL_COUNT dependency" >> $GITHUB_ENV
      else
        echo "Bumping $CABAL_COUNT dependencies" >> $GITHUB_ENV
      fi
      echo "" >> $GITHUB_ENV
      cabal outdated >> $GITHUB_ENV
      echo "$DELIMITER" >> $GITHUB_ENV

  - name: Fetch cabal-plan-bounds
    if: env.CABAL_COUNT > 0
    shell: bash
    run: |
      curl -L https://github.com/nomeata/cabal-plan-bounds/releases/latest/download/cabal-plan-bounds.linux.gz | gunzip  > /usr/local/bin/cabal-plan-bounds
      chmod +x /usr/local/bin/cabal-plan-bounds

  - name: Update .cabal file
    if: env.CABAL_COUNT > 0
    shell: bash
    run: |
      cabal-plan-bounds --extend ${{ env.CABAL_PLAN_BOUNDS_FLAGS }} -c *.cabal

  - name: Build
    if: env.CABAL_COUNT > 0 && inputs.test == true
    shell: bash
    run: |
      cabal build --enable-tests --write-ghc-environment-files=always ${{ env.CABAL_FLAGS }}
      cabal test ${{ env.CABAL_FLAGS }}

  - name: Create Pull Request
    id: cpr
    if: env.CABAL_COUNT > 0
    uses: peter-evans/create-pull-request@v5
    with:
      branch: "cabal-updates"
      title: ${{ env.GIT_PR_TITLE }}
      body: ${{ env.GIT_PR_BODY }}
      commit-message: ${{ env.GIT_COMMIT_MESSAGE }}
      delete-branch: true
      add-paths: |
        *.cabal

  - name: Link to Pull Requst from summary
    if: env.CABAL_COUNT > 0 && steps.cpr.outputs.pull-request-number
    shell: bash
    run: |
      echo "See [pull request ${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }})" >> $GITHUB_STEP_SUMMARY
